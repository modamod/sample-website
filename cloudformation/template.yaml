AWSTemplateFormatVersion: "2010-09-09"
Description: Cloudformation template used to deploy a ecs cluster along side all the required resources

Parameters:
  Image:
    Description: "Docker image to be used with the cluster"
    Type: String
    Default: modamod/sample-website

  ClusterName:
    Description: Name used for the ecs cluster to be created
    Type: String
    Default: samplewebsite

  ClusterType:
    Description: "Cluster type"
    Type: String
    Default: awsvpc

  CIDR:
    Description: "VPC CIDR to use"
    Type: String

  Owner:
    Description: Resource Owner
    Type: String
    Default: modamod

  CostCenter:
    Description: Cost Center associated with the resource
    Type: String
    Default: "modamod"

  CertificateArn:
    Description: Certificate for the listener port.
    Type: String


Resources:


# Networking
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref Owner

        - Key: CostCenter
          Value: !Ref CostCenter

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref IGW

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Owner
          Value: !Ref Owner

        - Key: CostCenter
          Value: !Ref CostCenter

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Owner
          Value: !Ref Owner

        - Key: CostCenter
          Value: !Ref CostCenter

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW0

  RouteTableAssocName0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet0
      RouteTableId: !Ref RouteTable

  RouteTableAssocName1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  PrivateRouteTableAssocName0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTableAssocName1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  NatGatewayEIP0:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGW0:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref Subnet0
      AllocationId: !GetAtt NatGatewayEIP0.AllocationId

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsSupport: true
      Tags:
        - Key: Owner
          Value: !Ref Owner

        - Key: CostCenter
          Value: !Ref CostCenter

  Subnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref myVPC
      CidrBlock: !Select [0, !Cidr [!GetAtt myVPC.CidrBlock, 4, 8]]
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref myVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt myVPC.CidrBlock, 4, 8]]
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref myVPC
      CidrBlock: !Select [2, !Cidr [!GetAtt myVPC.CidrBlock, 4, 8]]
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref myVPC
      CidrBlock: !Select [3, !Cidr [!GetAtt myVPC.CidrBlock, 4, 8]]
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ClusterName}-pub-sg"
      GroupDescription: Security Group for public access for sample website
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ClusterName}-pvt-sg"
      GroupDescription: Security Group for private access for sample website
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt PublicSecurityGroup.GroupId

      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

# IAM Roles and Permissions
  EcsTasksRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-tasks-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

# IAM Roles and Permissions
  EcsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Ref ClusterName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicSecurityGroup
      Subnets:
        - !Ref Subnet0
        - !Ref Subnet1
      Type: application

      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref HttpsHttpTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS

  HttpsHttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Name: sample-website-tg
      Protocol: HTTP
      Port: 80
      VpcId: !Ref myVPC

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/sample-website-log-group
      RetentionInDays: 1

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      NetworkMode: !Ref ClusterType
      Cpu: "256"
      Memory: "512"
      TaskRoleArn: !GetAtt EcsTasksRole.Arn
      ExecutionRoleArn: !GetAtt EcsTasksRole.Arn
      ContainerDefinitions:
        - Name: !Ref ClusterName
          Image: !Ref Image
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 80
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: us-east-1
              awslogs-group: !Ref ECSLogGroup
              awslogs-stream-prefix: sample-website-log-stream

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref "EcsCluster"
      DesiredCount: 1
      TaskDefinition: !Ref "EcsTaskDefinition"
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref PrivateSecurityGroup
          Subnets:
            - !Ref PrivateSubnet0
            - !Ref PrivateSubnet1
      LoadBalancers:
        - ContainerName: !Ref ClusterName
          ContainerPort: 80
          TargetGroupArn: !Ref HttpsHttpTargetGroup

    DependsOn: HttpsListener

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: !Ref ClusterName
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter
Outputs:
  ELBDNS:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
